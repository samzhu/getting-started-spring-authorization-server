/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.repositories.tables.pojos;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;


import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import javax.persistence.EntityListeners;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.data.domain.Persistable;
import javax.persistence.Version;

/**
 * Account information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Slf4j
@Data
@EntityListeners({AuditingEntityListener.class})
@JsonIgnoreProperties(value = {"hibernateLazyInitializer", "handler", "fieldHandler"})
@Entity
@Table(
    name = "user_account",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "uk_user_account_user_name", columnNames = { "user_name" })
    }
)
public class UserAccount implements Serializable, Persistable<String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Column(name = "id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    private String        id;

    @Column(name = "user_name", nullable = false, length = 30)
    @NotNull
    @Size(max = 30)
    private String        userName;

    @Column(name = "user_password", nullable = false, length = 60)
    @NotNull
    @Size(max = 60)
    private String        userPassword;

    @Column(name = "enabled", nullable = false)
    @NotNull
    private Boolean       enabled;

    @Column(name = "account_non_expired", nullable = false)
    @NotNull
    private Boolean       accountNonExpired;

    @Column(name = "account_non_locked", nullable = false)
    @NotNull
    private Boolean       accountNonLocked;

    @Column(name = "credentials_non_expired", nullable = false)
    @NotNull
    private Boolean       credentialsNonExpired;

    @CreatedBy
    @Column(name = "created_by", length = 30)
    @Size(max = 30)
    private String        createdBy;

    @CreatedDate
    @Column(name = "created_date", nullable = false, precision = 6)
    private LocalDateTime createdDate;

    @LastModifiedBy
    @Column(name = "last_modified_by", length = 30)
    @Size(max = 30)
    private String        lastModifiedBy;

    @LastModifiedDate
    @Column(name = "last_modified_date", nullable = false, precision = 6)
    private LocalDateTime lastModifiedDate;


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserAccount other = (UserAccount) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userName == null) {
            if (other.userName != null)
                return false;
        }
        else if (!this.userName.equals(other.userName))
            return false;
        if (this.userPassword == null) {
            if (other.userPassword != null)
                return false;
        }
        else if (!this.userPassword.equals(other.userPassword))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.accountNonExpired == null) {
            if (other.accountNonExpired != null)
                return false;
        }
        else if (!this.accountNonExpired.equals(other.accountNonExpired))
            return false;
        if (this.accountNonLocked == null) {
            if (other.accountNonLocked != null)
                return false;
        }
        else if (!this.accountNonLocked.equals(other.accountNonLocked))
            return false;
        if (this.credentialsNonExpired == null) {
            if (other.credentialsNonExpired != null)
                return false;
        }
        else if (!this.credentialsNonExpired.equals(other.credentialsNonExpired))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.createdDate == null) {
            if (other.createdDate != null)
                return false;
        }
        else if (!this.createdDate.equals(other.createdDate))
            return false;
        if (this.lastModifiedBy == null) {
            if (other.lastModifiedBy != null)
                return false;
        }
        else if (!this.lastModifiedBy.equals(other.lastModifiedBy))
            return false;
        if (this.lastModifiedDate == null) {
            if (other.lastModifiedDate != null)
                return false;
        }
        else if (!this.lastModifiedDate.equals(other.lastModifiedDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.userPassword == null) ? 0 : this.userPassword.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.accountNonExpired == null) ? 0 : this.accountNonExpired.hashCode());
        result = prime * result + ((this.accountNonLocked == null) ? 0 : this.accountNonLocked.hashCode());
        result = prime * result + ((this.credentialsNonExpired == null) ? 0 : this.credentialsNonExpired.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.createdDate == null) ? 0 : this.createdDate.hashCode());
        result = prime * result + ((this.lastModifiedBy == null) ? 0 : this.lastModifiedBy.hashCode());
        result = prime * result + ((this.lastModifiedDate == null) ? 0 : this.lastModifiedDate.hashCode());
        return result;
    }
    
    @Override
    public String getId() {
        return this.id;
    }
    
    @JsonIgnore
    @Override
    public boolean isNew() {
        return null == this.createdDate;
    }
    
}
