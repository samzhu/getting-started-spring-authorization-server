/*
 * This file is generated by jOOQ.
 */
package com.example.demo.infrastructure.repositories.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;


import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import jakarta.persistence.EntityListeners;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.data.domain.Persistable;
import jakarta.persistence.Version;

/**
 * Group permissions data
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Slf4j
@Data
@EntityListeners({AuditingEntityListener.class})
@JsonIgnoreProperties(value = {"hibernateLazyInitializer", "handler", "fieldHandler"})
@Entity
@Table(
    name = "user_group_scope",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "uk_user_group_scope_group_scope", columnNames = { "user_group_id", "scope_id" })
    }
)
public class UserGroupScope implements Serializable, Persistable<String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Column(name = "id", nullable = false, length = 10)
    @NotNull
    @Size(max = 10)
    private String        id;

    @Column(name = "user_group_id", nullable = false, length = 10)
    @NotNull
    @Size(max = 10)
    private String        userGroupId;

    @Column(name = "scope_id", nullable = false, length = 10)
    @NotNull
    @Size(max = 10)
    private String        scopeId;

    @CreatedBy
    @Column(name = "created_by", length = 30)
    @Size(max = 30)
    private String        createdBy;

    @CreatedDate
    @Column(name = "created_date", nullable = false, precision = 6)
    private LocalDateTime createdDate;

    @LastModifiedBy
    @Column(name = "last_modified_by", length = 30)
    @Size(max = 30)
    private String        lastModifiedBy;

    @LastModifiedDate
    @Column(name = "last_modified_date", nullable = false, precision = 6)
    private LocalDateTime lastModifiedDate;


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserGroupScope other = (UserGroupScope) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userGroupId == null) {
            if (other.userGroupId != null)
                return false;
        }
        else if (!this.userGroupId.equals(other.userGroupId))
            return false;
        if (this.scopeId == null) {
            if (other.scopeId != null)
                return false;
        }
        else if (!this.scopeId.equals(other.scopeId))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.createdDate == null) {
            if (other.createdDate != null)
                return false;
        }
        else if (!this.createdDate.equals(other.createdDate))
            return false;
        if (this.lastModifiedBy == null) {
            if (other.lastModifiedBy != null)
                return false;
        }
        else if (!this.lastModifiedBy.equals(other.lastModifiedBy))
            return false;
        if (this.lastModifiedDate == null) {
            if (other.lastModifiedDate != null)
                return false;
        }
        else if (!this.lastModifiedDate.equals(other.lastModifiedDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userGroupId == null) ? 0 : this.userGroupId.hashCode());
        result = prime * result + ((this.scopeId == null) ? 0 : this.scopeId.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.createdDate == null) ? 0 : this.createdDate.hashCode());
        result = prime * result + ((this.lastModifiedBy == null) ? 0 : this.lastModifiedBy.hashCode());
        result = prime * result + ((this.lastModifiedDate == null) ? 0 : this.lastModifiedDate.hashCode());
        return result;
    }
    
    @Override
    public String getId() {
        return this.id;
    }
    
    @JsonIgnore
    @Override
    public boolean isNew() {
        return null == this.createdDate;
    }
    
}
